const express = require('express');
const RateLimit = require('express-rate-limit');
const escape = require('escape-html');

const app = express();
const port = 3000;

// Limiteur de taux : max 10 requÃªtes par minute par IP sur /salutation
const salutationLimiter = RateLimit({
  windowMs: 60 * 1000, // 1 minute
  max: 10,
  message: "Trop de requÃªtes de salutation, veuillez patienter une minute."
});

// Stockage en mÃ©moire des passages
let passages = [];

// Fonction pour Ã©chapper les caractÃ¨res HTML
function escapeHtml(text) {
  return text
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}

// Route GET /salutation
app.get('/salutation', salutationLimiter, (req, res) => {
  // RÃ©cupÃ©ration et Ã©chappement des paramÃ¨tres
  const nomBrut = req.query.nom || 'Inconnu';
  const stationBrute = req.query.gare || 'non dÃ©finie';
  const nom = escapeHtml(nomBrut);
  const station = escapeHtml(stationBrute);
  const heure = new Date();

  // Enregistrement en mÃ©moire
  passages.push({ nom, station, heure });

  // Message personnalisÃ©
  const safeNom = escape(nom);
  const safeStation = escape(station);
  const message = nom.toLowerCase() === 'gena'
    ? `ğŸ‘‹ Bonjour Gena ! Ã€ ${safeStation}, votre foulard numÃ©rique se manifeste Ã  ${heure.toLocaleTimeString()} ğŸ§£`
    : `ğŸ‘‹ Bonjour ${safeNom}, passage dÃ©tectÃ© Ã  ${safeStation} Ã  ${heure.toLocaleTimeString()}.`;

  // Log et rÃ©ponse
  console.log(`[${heure.toLocaleTimeString()}] Salutation textile : ${nom} Ã  ${station}`);
  res.send(message);
});

// DÃ©marrage du serveur
app.listen(port, () => {
  console.log(`ğŸ§¶ Serveur textile actif sur http://localhost:${port}`);
});

